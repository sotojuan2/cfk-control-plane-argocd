{
  "master": {
    "tasks": [
        "subtasks": [
          {
            "id": "6.1",
            "title": "Analyze Rego Policy for Edge Cases",
            "description": "Systematically review the `kafkatopic_naming.rego` policy to identify potential loopholes, missed scenarios, or edge cases not covered by the initial implementation.",
            "dependencies": [],
            "details": "Examine the policy's logic against various potential `KafkaTopic` manifest structures. Consider scenarios like missing metadata, different API versions, and names that might incorrectly pass or fail the current validation rules. Document all findings.",
            "status": "pending",
            "testStrategy": "Manually review the Rego code and compare it against a checklist of potential edge cases (e.g., empty name, name with special characters, multi-segment names)."
          },
          {
            "id": "6.2",
            "title": "Update Rego Policy to Address Identified Gaps",
            "description": "Modify the `kafkatopic_naming.rego` file to incorporate the logic required to handle the edge cases and scenarios identified during the analysis phase.",
            "dependencies": [],
            "details": "Refine the regular expressions or add conditional logic to the `deny` rule to make the policy more robust. Ensure the policy correctly handles all identified edge cases while still enforcing the core naming convention.",
            "status": "pending",
            "testStrategy": "Use `opa eval` with test manifests specifically designed to trigger the previously identified edge cases and confirm the policy now behaves as expected."
          },
          {
            "id": "6.3",
            "title": "Refactor `deny` Rule for Dynamic Error Message Generation",
            "description": "Modify the `deny` rule in `kafkatopic_naming.rego` to produce a detailed, dynamic failure message that includes the resource name and the specific reason for non-compliance.",
            "dependencies": [],
            "details": "Change the `deny` rule to return a formatted string. Use `sprintf` or string concatenation to construct a message like: 'KafkaTopic \"{resource_name}\" is non-compliant. Reason: {failure_reason}'.",
            "status": "pending",
            "testStrategy": "Run `opa eval` against an invalid manifest and inspect the JSON output to ensure the `deny` field contains the complete, correctly formatted error message."
          },
          {
            "id": "6.4",
            "title": "Configure GitHub Actions Step to Capture and Display OPA Errors",
            "description": "Update the `opa-validation.yml` workflow to correctly parse the output from the OPA evaluation and surface the detailed error messages in the GitHub Actions run logs.",
            "dependencies": [],
            "details": "Modify the script in the validation step to check if the OPA evaluation produced any `deny` messages. If denials exist, print each message to standard error and fail the workflow step with a non-zero exit code.",
            "status": "pending",
            "testStrategy": "Run the validation script locally, pointing it to the OPA policy and an invalid manifest, and verify it prints the error message and exits with a status of 1."
          },
          {
            "id": "6.5",
            "title": "Perform Local End-to-End Validation of Error Reporting",
            "description": "Create a comprehensive set of test `KafkaTopic` manifests (both valid and invalid) and run the entire local validation script to confirm the refined policy and error reporting work together correctly.",
            "dependencies": [],
            "details": "Create several YAML files containing `KafkaTopic` resources that violate the naming policy in different ways. Execute the validation script against these files and verify that for each violation, the correct, specific error message is displayed.",
            "status": "pending",
            "testStrategy": "Execute the local validation script against a directory of test manifests and confirm that the script fails and the output log contains precise error messages for each non-compliant resource."
          }
        ]
            "status": "pending"
          }
        ]
      },
      {
        "id": 2,
        "title": "Develop OPA Rego Policy for KafkaTopic Naming",
        "subtasks": [
          {
            "id": "2.1",
            "title": "Crear estructura básica Rego",
            "description": "Definir el package y las importaciones necesarias",
            "status": "pending"
          },
          {
            "id": "2.2",
            "title": "Implementar regla deny",
            "description": "Escribir la regla principal de validación",
            "status": "pending"
          },
          {
            "id": "2.3",
            "title": "Agregar pruebas unitarias",
            "description": "Crear conjunto de pruebas Rego para validar la política",
            "status": "pending"
          }
        ]
      },
      {
        "id": 3,
        "title": "Create GitHub Actions Workflow File Structure",
        "subtasks": [
          {
            "id": "3.1",
            "title": "Crear estructura YAML básica",
            "description": "Definir nombre del workflow y eventos trigger",
            "status": "pending"
          },
          {
            "id": "3.2",
            "title": "Configurar job principal",
            "description": "Definir el job de validación y sus pasos básicos",
            "status": "pending"
          },
          {
            "id": "3.3",
            "title": "Agregar permisos y configuración",
            "description": "Configurar permisos necesarios y variables de entorno",
            "status": "pending"
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement Code Checkout and Changed Manifest Identification",
        "subtasks": [
          {
            "id": "4.1",
            "title": "Configurar checkout",
            "description": "Agregar paso de checkout del código",
            "status": "pending"
          },
          {
            "id": "4.2",
            "title": "Implementar detección de cambios",
            "description": "Configurar tj-actions/changed-files",
            "status": "pending"
          },
          {
            "id": "4.3",
            "title": "Agregar filtrado de archivos",
            "description": "Implementar filtro para archivos .yaml/.yml",
            "status": "pending"
          }
        ]
      },
      {
        "id": 5,
        "title": "Integrate OPA Validation Step into Workflow",
        "subtasks": [
          {
            "id": "5.1",
            "title": "Evaluate and Select OPA GitHub Action",
            "description": "Research and compare the recommended GitHub Marketplace actions (`open-policy-agent/opa-check` vs. `actions/setup-opa` with `opa eval`) to determine the most suitable one for the project's needs, focusing on ease of configuration and performance when processing multiple manifest files.",
            "dependencies": [],
            "details": "Create a brief comparison document or comment outlining the pros and cons of each approach. The final decision should be documented in the task ticket.",
            "status": "pending",
            "testStrategy": "Review the documentation for both actions to confirm they support passing a list of files as input."
          },
          {
            "id": "5.2",
            "title": "Implement File Discovery Logic in Workflow",
            "description": "Add a preliminary step in the `opa-validation.yml` workflow to identify and list all relevant Kubernetes manifest files that have been changed in the pull request. This list will serve as the input for the OPA validation step.",
            "dependencies": [],
            "details": "Use a tool like `tj-actions/changed-files` or a custom `git diff` script to get a space-separated list of changed YAML/YML files. Store this list in a step output variable for later use.",
            "status": "pending",
            "testStrategy": "In a test PR, echo the output variable to the job log to ensure it correctly captures the paths of modified manifest files."
          },
          {
            "id": "5.3",
            "title": "Add the OPA Validation Step to Workflow YAML",
            "description": "Incorporate the selected OPA GitHub Action as a new step within the validation job in the `.github/workflows/opa-validation.yml` file.",
            "dependencies": ["5.1"],
            "details": "Add the `uses:` directive for the chosen action (e.g., `uses: open-policy-agent/opa-check@v1`). Ensure it is placed after the file discovery step.",
            "status": "pending",
            "testStrategy": "Commit the change and observe the workflow run to confirm the action is downloaded and initialized without syntax errors in the YAML."
          },
          {
            "id": "5.4",
            "title": "Configure OPA Action Parameters",
            "description": "Configure the newly added OPA action step with the necessary inputs, including the path to the Rego policy and the list of manifest files to be evaluated.",
            "dependencies": ["5.2", "5.3"],
            "details": "Use the `with:` block to pass parameters. Set the policy path to `kafkatopic_naming.rego`. Pass the output variable from the file discovery step (subtask 5.2) as the input file list. Specify the Rego query to execute (e.g., `data.kafka.naming.deny`).",
            "status": "pending",
            "testStrategy": "Run the workflow with a hardcoded path to a single test manifest to verify the parameter passing mechanism works before using the dynamic list."
          },
          {
            "id": "5.5",
            "title": "Perform Initial Run with a Dummy Manifest",
            "description": "Create a draft pull request containing a single, simple `KafkaTopic` manifest to perform a basic, low-impact test of the newly integrated OPA validation step.",
            "dependencies": ["5.4"],
            "details": "The dummy manifest can be either compliant or non-compliant. The goal is not to test the policy logic itself, but to verify that the OPA action is invoked, correctly receives the manifest as input, and executes the policy against it, producing an exit code.",
            "status": "pending",
            "testStrategy": "Observe the workflow logs for the draft PR. Confirm the OPA step runs, logs that it is processing the dummy manifest file, and either passes or fails as expected based on the dummy file's content."
          }
        ]
      },
      {
        "id": 6,
        "title": "Refine OPA Policy and Enhance Error Reporting",
        "subtasks": [
          {
            "id": "6.1",
            "title": "Mejorar mensajes de error",
            "description": "Agregar mensajes descriptivos para cada tipo de error",
            "status": "pending"
          },
          {
            "id": "6.2",
            "title": "Implementar casos borde",
            "description": "Agregar validaciones para casos especiales",
            "status": "pending"
          },
          {
            "id": "6.3",
            "title": "Documentar errores",
            "description": "Crear documentación de posibles errores y soluciones",
            "status": "pending"
          }
        ]
      }
    ]
  }
}